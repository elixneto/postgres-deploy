/* ... EXECUTE SCRIPT AS POSTGRES ... */

-- DROP TABLE public.DEPLOY;
CREATE TABLE public.DEPLOY (
    DEPLOYID SERIAL NOT NULL PRIMARY KEY
   ,PROJECT CHARACTER VARYING (50) NOT NULL
   ,VERSION CHARACTER VARYING (10) NOT NULL
   ,EXECNUM SMALLINT DEFAULT 1 NOT NULL
   ,CONSTRAINT UNQ_DEPLOY_01 UNIQUE (PROJECT , VERSION , EXECNUM)
) WITH
(OIDS=FALSE);

COMMENT ON COLUMN public.DEPLOY.DEPLOYID IS 'PKey';
COMMENT ON COLUMN public.DEPLOY.PROJECT IS 'The name/initials of the project';
COMMENT ON COLUMN public.DEPLOY.VERSION IS 'The version of the project';
COMMENT ON COLUMN public.DEPLOY.EXECNUM IS 'The number of the execution to the same PROJECT and VERSION';

-- DROP TABLE public.DEPLOYCHILD;
CREATE TABLE public.DEPLOYCHILD (
    DEPLOYID INTEGER NOT NULL
   ,CHILDNAME CHARACTER VARYING (100) NOT NULL
   ,DESCFILE CHARACTER VARYING (100) NOT NULL
   ,STARTAT TIMESTAMP(6) DEFAULT NOW() NOT NULL
   ,ENDAT TIMESTAMP(6)
   ,CONSTRAINT FK_DEPLOYCHILD_01 FOREIGN KEY (DEPLOYID) REFERENCES public.DEPLOY
) WITH
(OIDS=FALSE);

COMMENT ON COLUMN public.DEPLOYCHILD.DEPLOYID IS 'FK for public.DEPLOY.ID';
COMMENT ON COLUMN public.DEPLOYCHILD.CHILDNAME IS 'The identifier to the item on deploy';
COMMENT ON COLUMN public.DEPLOYCHILD.DESCFILE IS 'Description of the file item';
COMMENT ON COLUMN public.DEPLOYCHILD.STARTAT IS 'The start time of execution';
COMMENT ON COLUMN public.DEPLOYCHILD.ENDAT IS 'The end time of execution';

CREATE OR REPLACE FUNCTION public.fc_deploy(pprj IN CHARACTER VARYING(10), pvrs IN CHARACTER VARYING(10)) RETURNS INTEGER AS
$$
DECLARE

    vDeployID INTEGER;
    vExecNum  INTEGER := 0;

BEGIN

    -- How many times ran DEPLOY to the (PRJ + VRS)...
    SELECT COUNT(*)+1 INTO vExecNum FROM public.DEPLOY WHERE PROJECT = pprj AND VERSION = pvrs;

    -- Retrieving the DEPLOYID...
    INSERT INTO public.DEPLOY (PROJECT , VERSION , EXECNUM) VALUES (pprj , pvrs , vExecNum) RETURNING DEPLOYID INTO vDeployID;

    -- Returning DEPLOYID
    RETURN vDeployID;

END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION public.fc_deploychild(pdeployid IN INTEGER, pchildname IN CHARACTER VARYING (100), pdescfile IN CHARACTER VARYING (100)) RETURNS VOID AS
$$
DECLARE

    vQtdChild INTEGER := 0;

BEGIN

    -- If exists the record...
    SELECT COUNT(*) INTO vQtdChild FROM public.DEPLOYCHILD WHERE DEPLOYID = pdeployid AND CHILDNAME = pchildname AND ENDAT IS NULL;
    IF vQtdChild != 0 THEN
        UPDATE public.DEPLOYCHILD
           SET ENDAT = NOW()
         WHERE DEPLOYID = pdeployid
           AND CHILDNAME = pchildname
           AND ENDAT IS NULL;
    ELSE
        -- New record
        INSERT INTO public.DEPLOYCHILD (DEPLOYID , CHILDNAME , DESCFILE) VALUES (pdeployid , pchildname , pdescfile);
    END IF;

END;
$$ LANGUAGE plpgsql;